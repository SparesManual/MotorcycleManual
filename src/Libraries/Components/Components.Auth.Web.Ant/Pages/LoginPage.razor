@page "/login"
@page "/login/{userId:guid}"
@inherits BaseComponent<ILoginViewModel>
@implements ILoginView
@inject IAPIAuth m_auth

@inject ILoginViewModelValidator m_validator

@if (ViewModel!.RequiresConfirmation)
{
  <div class="row justify-content-center">
    <div class="col-4">
      <Alert Type="@AlertType.Error"
             Message="You need to confirm your account first!"
             Description="An account confirmation request has been sent to your email."
             ShowIcon>
      </Alert>

      <p class="ml-2">
        @* ReSharper disable once Html.AttributeValueNotResolved *@
        No email? <Button Type="link" Disabled="@ViewModel.Email.Length.Equals(0)" OnClick="ResendVerificationAsync" Style="margin: 0; padding: 0">Resend it</Button>.
      </p>
    </div>
  </div>
}

@if (ViewModel!.InvalidCredentials)
{
  <span>Invalid email or password</span>
}

<EditForm Model="@ViewModel"
          OnValidSubmit="ViewModel!.SubmitCommand.Execute">
  <FluentValidator Validator="m_validator"/>
  <div class="container w-25 align-middle">
    <div class="row mb-2">
      <div class="col">
        <div class="row">
          <Input Id="Email" Placeholder="Email" @bind-Value="@ViewModel!.Email" Class="w-100" Size="large"/>
        </div>
        <div class="row">
          <ValidationMessage For="() => ViewModel!.Email" class="mt-2"/>
        </div>
      </div>
    </div>

    <div class="row mb-4">
      <div class="col">
        <div class="row">
          <InputPassword Id="Password" Placeholder="Password" @bind-Value="@ViewModel!.Password" Size="large" Class="w-100" Type="string"></InputPassword>
        </div>
        <div class="row">
          <ValidationMessage For="() => ViewModel!.Password" class="mt-2"/>
        </div>
      </div>
    </div>

    <div class="row mb-4">
      <div class="col align-content-start">
        <Checkbox Id="RememberMe" Checked="ViewModel!.RememberMe">
          Remember me
        </Checkbox>
      </div>
      <div class="col-sm align-content-end text-right">
        <a href="/forgotPassword" id="ForgotPassword">Forgot password</a>
      </div>
    </div>

    <Button HtmlType="submit" Id="Login" Class="row mb-2 w-100" Size="large">
      Login
    </Button>

    <a href="/register" class="row">Not a member? Register</a>
  </div>
</EditForm>

@code {

  /// <summary>
  /// Registered user id
  /// </summary>
  [Parameter]
  public Guid? UserId { get; set; }

  private DateTime m_lastResend = DateTime.Now;

  private async Task ResendVerificationAsync()
  {
    var now = DateTime.Now;
    if (ViewModel is null
        || now - m_lastResend <= TimeSpan.FromSeconds(5))
      return;

    m_lastResend = now;
    await m_auth.ResendVerificationUserEmailAsync(ViewModel.Email).ConfigureAwait(false);
  }

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync().ConfigureAwait(false);
    if (UserId.HasValue
        && ViewModel is not null)
    {
      var email = await m_auth.GetUserEmailAsync(UserId?.ToString()).ConfigureAwait(false);
      if (string.IsNullOrEmpty(email))
        return;

      ViewModel.Email = email;
    }
  }

}