@page "/reset"
@inherits BaseComponent<IResetPasswordViewModel>
@inject IResetPasswordViewModelValidator m_validator
@inject NavigationManager m_navigator
@inject IAPIAuth m_auth

<AuthorizeView>
  <Authorized>

    @{
      m_navigator.NavigateTo("/userProfile");
    }

  </Authorized>
  <NotAuthorized Context="_">
    <EditForm Model="@ViewModel"
              OnValidSubmit="() => ViewModel!.SubmitCommand.Execute(null)">
      <FluentValidator Validator="m_validator"/>
      <div class="container w-25 align-middle">

        <div class="row mb-2">
          <div class="col">
            <div class="row">
              <InputPassword Id="Password" Placeholder="Password" @bind-Value="@ViewModel!.Password" Class="w-100" Type="string"></InputPassword>
            </div>
            <div class="row">
              <ValidationMessage For="() => ViewModel!.Password" class="mt-2"/>
            </div>
          </div>
        </div>

        <div class="row mb-2">
          <div class="col">
            <div class="row">
              <InputPassword Id="ConfirmPassword" Placeholder="Confirm password" @bind-Value="@ViewModel!.ConfirmPassword" Class="w-100" Type="string"></InputPassword>
            </div>
            <div class="row">
              <ValidationMessage For="() => ViewModel!.ConfirmPassword" class="mt-2"/>
            </div>
          </div>
        </div>

        <Button HtmlType="submit" Id="Reset" class="row" Size="large">
          Reset
        </Button>
      </div>
    </EditForm>
  </NotAuthorized>
</AuthorizeView>

@code {

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync().ConfigureAwait(false);

    var qs = m_navigator.ToAbsoluteUri(m_navigator.Uri).Query;
    var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(qs);
    if (query.TryGetValue("usr", out var userId))
      ViewModel!.UserId = userId;
    if (query.TryGetValue("token", out var token))
      ViewModel!.Token = token;

    var result = await m_auth.VerifyPasswordResetAsync(ViewModel!.UserId, ViewModel!.Token).ConfigureAwait(false);
    // If the verification was a success
    if (!result)
      m_navigator.NavigateTo("/");
  }

}