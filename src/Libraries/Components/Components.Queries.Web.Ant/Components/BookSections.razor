@* ReSharper disable once CheckNamespace *@
@namespace Comp
@inherits BasePagedComponent<IBookSectionsViewModel, ISection>

<Table @ref="m_grid"
       TItem="Section"
       Loading="ViewModel!.Loading"
       Total="ViewModel!.TotalItems"
       PageSize="ViewModel!.PageSize"
       RowClassName="x => x.Data.Id.Equals(m_sectionId) ? HIGHLIGHT : string.Empty"
       DataSource="@m_sections"
       OnRowClick="row => RowSelectedAsync(row.Data)"
       OnPageIndexChange="LoadTableData">
  <Column Title="Id" Field="context.Id" DataIndex="Id"></Column>
  <Column Title="Header" Field="context.Header"></Column>
  <Column Title="Figure" Field="context.FigureNumber"></Column>
  <Column Title="Pages" Field="context">
    @if (context.StartPage == context.EndPage)
    {
      <span>@context.StartPage</span>
    }
    else
    {
      <span>@context.StartPage</span>
      <span> - </span>
      <span>@context.EndPage</span>
    }
  </Column>
</Table>

<style>
  .sectionSelected {
    background-color: #fff1f0;
  }
</style>

@code {
#nullable enable

  private int m_currentPage;
  private const string HIGHLIGHT = "sectionSelected";
  private Table<Section>? m_grid;
  private int m_bookId;
  private int? m_sectionId;
  private Section[] m_sections = Array.Empty<Section>();

  private class Section
    : ISection
  {
    /// <inheritdoc />
    public int Id { get; }

    /// <inheritdoc />
    public int BookId { get; }

    /// <inheritdoc />
    public string Header { get; }

    /// <inheritdoc />
    public int StartPage { get; }

    /// <inheritdoc />
    public int EndPage { get; }

    /// <inheritdoc />
    public int FigureNumber { get; }

    /// <inheritdoc />
    public string FigureDescription { get; }

    public Section(ISection section)
    {
      Id = section.Id;
      BookId = section.BookId;
      Header = section.Header;
      StartPage = section.StartPage;
      EndPage = section.EndPage;
      FigureNumber = section.FigureNumber;
      FigureDescription = section.FigureDescription;
    }
  }

  /// <summary>
  /// Parent book id
  /// </summary>
  [Parameter]
  public int BookId
  {
    get => m_bookId;
    set
    {
      m_bookId = value;
      if (ViewModel != null) ViewModel.BookId = value;
    }
  }

  /// <summary>
  /// Triggered when the section section id is changed
  /// </summary>
  [Parameter]
  public EventCallback<int?> CurrentSectionChanged { get; set; }

  /// <inheritdoc />
  protected override async Task OnInitializedAsync()
  {
    m_currentPage = ViewModel?.PageIndex ?? 1;
    await base.OnInitializedAsync().ConfigureAwait(false);

    WrapData();
  }

  /// <inheritdoc />
  protected override void GoToPage(int page)
  {
    //m_currentPage = page;
    //StateHasChanged();
  }

  /// <summary>
  /// Sets the currently selected section id
  /// </summary>
  public void SetSectionId(int id)
    => m_sectionId = id;

  private Task RowSelectedAsync(ISection? section)
  {
    m_sectionId = section?.Id;
    return CurrentSectionChanged.InvokeAsync(section?.Id);
  }

  private async void LoadTableData(PaginationEventArgs data)
  {
    await LoadData("", data).ConfigureAwait(false);

    WrapData();
    StateHasChanged();
  }

  private void WrapData()
  {
    if (ViewModel is not null)
      m_sections = ViewModel.Items.Select(section => new Section(section)).ToArray();
  }

}