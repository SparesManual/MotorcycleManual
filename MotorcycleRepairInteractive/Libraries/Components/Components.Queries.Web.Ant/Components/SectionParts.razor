@* ReSharper disable once CheckNamespace *@
@namespace Comp
@inherits BasePagedComponent<ISectionPartsViewModel, ISectionPart>
@inject NavigationManager m_navigationManager

<Table @ref="m_grid"
       Total="ViewModel!.TotalItems"
       PageIndex="ViewModel!.PageIndex"
       PageSize="ViewModel!.PageSize"
       Loading="ViewModel!.Loading"
       DataSource="m_sectionParts"
       TItem="SectionPart"
       SelectedRowsChanged="x => SelectPart(x.First())"
       OnPageIndexChange="LoadTableData"
       TreeChildren="item => item.Children">
  <Column Title="Part number" Fixed="Left" Field="@context.PartNumber"></Column>
  <Column Title="Makers number" Field="@context.MakersPartNumber"></Column>
  <Column Title="Page number" Field="@context.PageNumber"></Column>
  <Column Title="Remarks" Field="@context.Remarks"></Column>
</Table>

@code {
#nullable enable

  private Table<SectionPart>? m_grid;
  private IReadOnlyCollection<SectionPart> m_sectionParts = Array.Empty<SectionPart>();

  private readonly struct SectionPart
  {
    public int Id { get; }

    public string PartNumber { get; }

    public string MakersPartNumber { get; }

    public string Description { get; }

    public int PageNumber { get; }

    public string Remarks { get; }

    public string AdditionalInfo { get; }

    public int Quantity { get; }

    public IReadOnlyCollection<SectionPart> Children { get; }

    /// <summary>
    /// Default constructor
    /// </summary>
    public SectionPart(ISectionPart sectionPart)
    {
      Id = sectionPart.Id;
      PartNumber = sectionPart.PartNumber;
      MakersPartNumber = sectionPart.MakersPartNumber;
      Description = sectionPart.Description;
      PageNumber = sectionPart.PageNumber;
      Remarks = sectionPart.Remarks;
      AdditionalInfo = sectionPart.AdditionalInfo;
      Quantity = sectionPart.Quantity;
      Children = sectionPart.Children.Select(sp => new SectionPart(sp)).ToReadOnlyCollection();
    }
  }

  /// <summary>
  /// Currently selected section id
  /// </summary>
  [Parameter]
  public int? SectionId
  {
    get => ViewModel?.SectionId;
    set
    {
      if (ViewModel is not null) ViewModel.SectionId = value;
    }
  }

  /// <inheritdoc />
  protected override void GoToPage(int page)
  {
  }

  /// <summary>
  /// Modify the current section
  /// </summary>
  /// <param name="section">Section number</param>
  public async Task ChangeSectionAsync(int? section)
  {
    if (ViewModel is null)
      return;

    if (section is null)
      ClearData();

    if (SectionId == section)
      return;

    SectionId = section;

    await ReloadData(ViewModel!.Search).ConfigureAwait(false);
    WrapItems();
  }

  private void WrapItems()
  {
    m_sectionParts = ViewModel!.Items.Select(sp => new SectionPart(sp)).ToReadOnlyCollection();
  }

  private async Task LoadTableData(PaginationEventArgs pagination)
  {
    await LoadData(string.Empty, pagination).ConfigureAwait(false);
    WrapItems();
  }

  private void SelectPart(SectionPart sectionPart)
    => m_navigationManager.NavigateTo("part/" + sectionPart.Id);

}
