@page "/partsall"
@inherits MRI.MVVM.Web.Helpers.BaseComponent<ViewModels.Interfaces.Queries.IAllPartsViewModel>

<h1>PartsAll</h1>

<div>
  <RadzenAutoComplete Data="ViewModel.Autocomplete" LoadData="LoadAutocompleteData" Placeholder="Search..."/>
</div>

<RadzenGrid Count="ViewModel.TotalItems" AllowPaging="true" LoadData="LoadTableData" Data="ViewModel.Items" PageSize="ViewModel.PageSize" TItem="Models.Interfaces.Entities.IPart">
  <Columns>
    <RadzenGridColumn TItem="Models.Interfaces.Entities.IPart" Property="PartNumber" Title="Part number">
      <Template Context="data">
        <a href="@($"part/{data.Id}")">@data.PartNumber</a>
      </Template>
      <FooterTemplate>
        Displayed parts: <b>@ViewModel.Items.Count</b> of <b>@ViewModel.TotalItems</b>
      </FooterTemplate>
    </RadzenGridColumn>
    <RadzenGridColumn TItem="Models.Interfaces.Entities.IPart" Property="MakersPartNumber" Title="Makers number"/>
    <RadzenGridColumn TItem="Models.Interfaces.Entities.IPart" Property="Description" Title="Description"/>
  </Columns>
</RadzenGrid>

@code
{
  /// <inheritdoc />
  protected override async Task OnInitializedAsync()
    => await ViewModel.LoadItems().ConfigureAwait(true);

  private async void LoadAutocompleteData(LoadDataArgs obj)
    => await ViewModel.UpdateAutocomplete(obj.Filter).ConfigureAwait(false);

  private async void LoadTableData(LoadDataArgs obj)
  {
    ViewModel.Search = obj.Filter;

    ViewModel.PageIndex = obj.Skip!.Value / ViewModel.PageSize + 1;

    await ViewModel.LoadItems().ConfigureAwait(false);
  }
}