@* ReSharper disable once CheckNamespace *@
@namespace Comp
@inherits BasePagedComponent<IBookSectionsViewModel, ISection>

<RadzenGrid RowSelect="@RowSelected" @ref="m_grid" Count="ViewModel!.TotalItems" AllowPaging="true" LoadData="x => LoadData(x.Filter, x)" Data="ViewModel!.Items" PageSize="ViewModel!.PageSize" TItem="ISection">
  <Columns>
    <RadzenGridColumn TItem="ISection" Property="Header" Title="Header">
      <FooterTemplate>
        Displayed sections: <b>@ViewModel!.Items.Count</b> of <b>@ViewModel!.TotalItems</b>
      </FooterTemplate>
    </RadzenGridColumn>
    <RadzenGridColumn TItem="ISection" Property="FigureNumber" Title="Figure"/>
    <RadzenGridColumn TItem="ISection" Title="Pages">
      <Template Context="data">
        @if (data.StartPage == data.EndPage)
        {
          <span>@data.StartPage</span>
        }
        else
        {
          <span>@data.StartPage</span>
          <span> - </span>
          <span>@data.EndPage</span>
        }
      </Template>
    </RadzenGridColumn>
  </Columns>
</RadzenGrid>

@code {
#nullable enable

  private RadzenGrid<ISection>? m_grid;
  private int m_bookId;

  /// <summary>
  /// Parent book id
  /// </summary>
  [Parameter]
  public int BookId
  {
    get => m_bookId;
    set
    {
      m_bookId = value;
      if (ViewModel != null) ViewModel.BookId = value;
    }
  }

  /// <summary>
  /// Triggered when the section section id is changed
  /// </summary>
  [Parameter]
  public EventCallback<int?> CurrentSectionChanged { get; set; }

  /// <inheritdoc />
  protected override void GoToPage(int page)
    => m_grid?.GoToPage(page);

  private async void RowSelected(ISection? section)
    => await CurrentSectionChanged.InvokeAsync(section?.Id).ConfigureAwait(false);

}