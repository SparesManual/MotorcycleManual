@* ReSharper disable once CheckNamespace *@
@namespace Comp
@inherits BasePagedComponent<ISectionPartsViewModel, ISectionPart>
@inject NavigationManager m_navigationManager

<RadzenGrid @ref="m_grid"
             Count="ViewModel!.TotalItems"
             AllowPaging="true"
             LoadData="x => LoadData(x.Filter, x)"
             Data="ViewModel!.Items"
             PageSize="ViewModel!.PageSize"
             TItem="ISectionPart"
             RowRender="@RowRender"
             RowSelect="@SelectPart"
             ExpandMode="DataGridExpandMode.Single">
  <Template Context="sectionPart">
    <RadzenGrid Data="@sectionPart.Children" TItem="ISectionPart" RowSelect="@SelectPart">
      <Columns>
        <RadzenGridColumn TItem="ISectionPart" Property="PartNumber" Title="Part number"/>
        <RadzenGridColumn TItem="ISectionPart" Property="MakersPartNumber" Title="Makers number"/>
        <RadzenGridColumn TItem="ISectionPart" Property="PageNumber" Title="Page number"/>
        <RadzenGridColumn TItem="ISectionPart" Property="Remarks" Title="Remarks"/>
      </Columns>
    </RadzenGrid>
  </Template>
  <Columns>
    <RadzenGridColumn TItem="ISectionPart" Property="PartNumber" Title="Part number">
      <FooterTemplate>
        Displayed parts: <b>@ViewModel!.Items.Count</b> of <b>@ViewModel!.TotalItems</b>
      </FooterTemplate>
    </RadzenGridColumn>
    <RadzenGridColumn TItem="ISectionPart" Property="MakersPartNumber" Title="Makers number"/>
    <RadzenGridColumn TItem="ISectionPart" Property="PageNumber" Title="Page number"/>
    <RadzenGridColumn TItem="ISectionPart" Property="Remarks" Title="Remarks"/>
  </Columns>
</RadzenGrid>

@code {
#nullable enable

  private RadzenGrid<ISectionPart>? m_grid;

  /// <summary>
  /// Currently selected section id
  /// </summary>
  [Parameter]
  public int? SectionId
  {
    get => ViewModel?.SectionId;
    set
    {
      if (ViewModel is not null) ViewModel.SectionId = value;
    }
  }

  void RowRender(RowRenderEventArgs<ISectionPart> args)
  {
    if (ViewModel is not null)
      args.Expandable = args.Data.Children.Any();
  }

  /// <inheritdoc />
  protected override void GoToPage(int page)
    => m_grid?.GoToPage(page);

  /// <summary>
  /// Modify the current section
  /// </summary>
  /// <param name="section">Section number</param>
  public async Task ChangeSectionAsync(int? section)
  {
    if (ViewModel is null)
      return;

    if (section is null)
      ClearData();

    if (SectionId == section)
      return;

    SectionId = section;

    await ReloadData(ViewModel!.Search).ConfigureAwait(false);
  }

  private void SelectPart(ISectionPart sectionPart)
    => m_navigationManager.NavigateTo("part/" + sectionPart.Id);

}