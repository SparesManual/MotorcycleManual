// ReSharper disable All
// <auto-generated />
using System;
using Db.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Db.API.Data
{
    [DbContext(typeof(ManualContext))]
    partial class ManualContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Db.Core.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Db.Core.Entities.Carburetor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carburetors");
                });

            modelBuilder.Entity("Db.Core.Entities.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarburetorId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Carburetors")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Displacement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short>("Transmission")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarburetorId");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("Db.Core.Entities.FormatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FormatTypes");
                });

            modelBuilder.Entity("Db.Core.Entities.ImagePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<double>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<int>("SectionPartsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectionPartsId");

                    b.ToTable("ImagePoints");
                });

            modelBuilder.Entity("Db.Core.Entities.Make", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("Db.Core.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EngineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MakeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("EngineId");

                    b.HasIndex("MakeId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Db.Core.Entities.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("MakersPartNumber")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Db.Core.Entities.Property", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<int>("FormatTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("PartId", "PropertyName");

                    b.HasIndex("FormatTypeId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Db.Core.Entities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("Db.Core.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndPage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FigureDescription")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("FigureNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SectionHeader")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartPage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Db.Core.Entities.SectionModels", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SectionId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("SectionModels");
                });

            modelBuilder.Entity("Db.Core.Entities.SectionPartParents", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("SectionPartParents");
                });

            modelBuilder.Entity("Db.Core.Entities.SectionParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("TEXT");

                    b.Property<int>("PageNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("SectionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionParts");
                });

            modelBuilder.Entity("Db.Core.Entities.Engine", b =>
                {
                    b.HasOne("Db.Core.Entities.Carburetor", "Carburetor")
                        .WithMany()
                        .HasForeignKey("CarburetorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carburetor");
                });

            modelBuilder.Entity("Db.Core.Entities.ImagePoint", b =>
                {
                    b.HasOne("Db.Core.Entities.SectionParts", "SectionParts")
                        .WithMany("ImagePoints")
                        .HasForeignKey("SectionPartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionParts");
                });

            modelBuilder.Entity("Db.Core.Entities.Model", b =>
                {
                    b.HasOne("Db.Core.Entities.Book", "Book")
                        .WithMany("BookModels")
                        .HasForeignKey("BookId");

                    b.HasOne("Db.Core.Entities.Engine", "Engine")
                        .WithMany()
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.Make", "Make")
                        .WithMany("Models")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Engine");

                    b.Navigation("Make");
                });

            modelBuilder.Entity("Db.Core.Entities.Property", b =>
                {
                    b.HasOne("Db.Core.Entities.FormatType", "FormatType")
                        .WithMany()
                        .HasForeignKey("FormatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.Part", "Part")
                        .WithMany("PartProperties")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormatType");

                    b.Navigation("Part");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Db.Core.Entities.Section", b =>
                {
                    b.HasOne("Db.Core.Entities.Book", "Book")
                        .WithMany("BookSections")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Db.Core.Entities.SectionModels", b =>
                {
                    b.HasOne("Db.Core.Entities.Model", "Model")
                        .WithMany("ModelSections")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.Section", "Section")
                        .WithMany("SectionModels")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Db.Core.Entities.SectionPartParents", b =>
                {
                    b.HasOne("Db.Core.Entities.SectionParts", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.SectionParts", "Parent")
                        .WithMany("ChildSections")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Db.Core.Entities.SectionParts", b =>
                {
                    b.HasOne("Db.Core.Entities.Part", "Part")
                        .WithMany("PartSections")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.Section", "Section")
                        .WithMany("SectionParts")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Db.Core.Entities.Book", b =>
                {
                    b.Navigation("BookModels");

                    b.Navigation("BookSections");
                });

            modelBuilder.Entity("Db.Core.Entities.Make", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Db.Core.Entities.Model", b =>
                {
                    b.Navigation("ModelSections");
                });

            modelBuilder.Entity("Db.Core.Entities.Part", b =>
                {
                    b.Navigation("PartProperties");

                    b.Navigation("PartSections");
                });

            modelBuilder.Entity("Db.Core.Entities.Section", b =>
                {
                    b.Navigation("SectionModels");

                    b.Navigation("SectionParts");
                });

            modelBuilder.Entity("Db.Core.Entities.SectionParts", b =>
                {
                    b.Navigation("ChildSections");

                    b.Navigation("ImagePoints");
                });
#pragma warning restore 612, 618
        }
    }
}
