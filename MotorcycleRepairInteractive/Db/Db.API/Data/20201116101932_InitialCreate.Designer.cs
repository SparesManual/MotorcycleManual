// <auto-generated />
using Db.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Db.API.Data
{
    [DbContext(typeof(ManualContext))]
    [Migration("20201116101932_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Db.Core.Entities.AssemblyParts", b =>
                {
                    b.Property<int>("AssemblyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartOccurrence")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssemblyId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("AssemblyParts");
                });

            modelBuilder.Entity("Db.Core.Entities.AssemblySubAssemblies", b =>
                {
                    b.Property<int>("AssemblyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubAssemblyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssemblyId", "SubAssemblyId");

                    b.HasIndex("SubAssemblyId");

                    b.ToTable("SubAssemblies");
                });

            modelBuilder.Entity("Db.Core.Entities.Drawing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManualId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PageEnd")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PageStart")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ManualId");

                    b.ToTable("Drawings");
                });

            modelBuilder.Entity("Db.Core.Entities.DrawingModels", b =>
                {
                    b.Property<int>("DrawingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PageNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartReference")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<double>("PositionY")
                        .HasColumnType("REAL");

                    b.HasKey("DrawingId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("DrawingModels");
                });

            modelBuilder.Entity("Db.Core.Entities.Manual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Manuals");
                });

            modelBuilder.Entity("Db.Core.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Db.Core.Entities.Property", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasIndex("PartId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Db.Core.Entities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("Db.Core.Entities.Assembly", b =>
                {
                    b.HasBaseType("Db.Core.Entities.Model");

                    b.ToTable("Assembly");
                });

            modelBuilder.Entity("Db.Core.Entities.Part", b =>
                {
                    b.HasBaseType("Db.Core.Entities.Model");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("MakersNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.ToTable("Part");
                });

            modelBuilder.Entity("Db.Core.Entities.AssemblyParts", b =>
                {
                    b.HasOne("Db.Core.Entities.Assembly", "Assembly")
                        .WithMany("AssemblyParts")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.Part", "Part")
                        .WithMany("ParentAssemblies")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assembly");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Db.Core.Entities.AssemblySubAssemblies", b =>
                {
                    b.HasOne("Db.Core.Entities.Assembly", "Assembly")
                        .WithMany("AssemblySubAssemblies")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.Assembly", "SubAssembly")
                        .WithMany("AssemblyParentAssemblies")
                        .HasForeignKey("SubAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assembly");

                    b.Navigation("SubAssembly");
                });

            modelBuilder.Entity("Db.Core.Entities.Drawing", b =>
                {
                    b.HasOne("Db.Core.Entities.Manual", "Manual")
                        .WithMany()
                        .HasForeignKey("ManualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manual");
                });

            modelBuilder.Entity("Db.Core.Entities.DrawingModels", b =>
                {
                    b.HasOne("Db.Core.Entities.Drawing", "Drawing")
                        .WithMany("DrawingModels")
                        .HasForeignKey("DrawingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.Model", "Model")
                        .WithMany("DrawingModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drawing");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Db.Core.Entities.Property", b =>
                {
                    b.HasOne("Db.Core.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.Core.Entities.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Db.Core.Entities.Assembly", b =>
                {
                    b.HasOne("Db.Core.Entities.Model", null)
                        .WithOne()
                        .HasForeignKey("Db.Core.Entities.Assembly", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Core.Entities.Part", b =>
                {
                    b.HasOne("Db.Core.Entities.Model", null)
                        .WithOne()
                        .HasForeignKey("Db.Core.Entities.Part", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Core.Entities.Drawing", b =>
                {
                    b.Navigation("DrawingModels");
                });

            modelBuilder.Entity("Db.Core.Entities.Model", b =>
                {
                    b.Navigation("DrawingModels");
                });

            modelBuilder.Entity("Db.Core.Entities.Assembly", b =>
                {
                    b.Navigation("AssemblyParentAssemblies");

                    b.Navigation("AssemblyParts");

                    b.Navigation("AssemblySubAssemblies");
                });

            modelBuilder.Entity("Db.Core.Entities.Part", b =>
                {
                    b.Navigation("ParentAssemblies");
                });
#pragma warning restore 612, 618
        }
    }
}
